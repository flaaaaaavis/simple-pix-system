// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protobuf/pix/v1/pix.proto

package pix

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PixServiceClient is the client API for PixService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PixServiceClient interface {
	// RPC é remote procedure call - g é de google
	CreateBankAccount(ctx context.Context, in *BankAccount, opts ...grpc.CallOption) (*BankAccount, error)
	GetBankAccountById(ctx context.Context, in *BankAccount, opts ...grpc.CallOption) (*BankAccount, error)
	CreatePix(ctx context.Context, in *Pix, opts ...grpc.CallOption) (*Pix, error)
	GetPixById(ctx context.Context, in *Pix, opts ...grpc.CallOption) (*Pix, error)
	UpdatePixBalance(ctx context.Context, in *Pix, opts ...grpc.CallOption) (*Pix, error)
	CreatePixCode(ctx context.Context, in *PixCode, opts ...grpc.CallOption) (*PixCode, error)
	GetPixCodeByPixId(ctx context.Context, in *PixCode, opts ...grpc.CallOption) (*PixCode, error)
	GetPixCodeByCode(ctx context.Context, in *PixCode, opts ...grpc.CallOption) (*PixCode, error)
	UpdatePixCode(ctx context.Context, in *PixCode, opts ...grpc.CallOption) (*PixCode, error)
	DeletePixCode(ctx context.Context, in *PixCode, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error)
	ListUserTransactionsById(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*ListUserTransactionsByIdResponse, error)
	UpdateTransactionById(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error)
}

type pixServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPixServiceClient(cc grpc.ClientConnInterface) PixServiceClient {
	return &pixServiceClient{cc}
}

func (c *pixServiceClient) CreateBankAccount(ctx context.Context, in *BankAccount, opts ...grpc.CallOption) (*BankAccount, error) {
	out := new(BankAccount)
	err := c.cc.Invoke(ctx, "/mentoria.pix.v1.PixService/CreateBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixServiceClient) GetBankAccountById(ctx context.Context, in *BankAccount, opts ...grpc.CallOption) (*BankAccount, error) {
	out := new(BankAccount)
	err := c.cc.Invoke(ctx, "/mentoria.pix.v1.PixService/GetBankAccountById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixServiceClient) CreatePix(ctx context.Context, in *Pix, opts ...grpc.CallOption) (*Pix, error) {
	out := new(Pix)
	err := c.cc.Invoke(ctx, "/mentoria.pix.v1.PixService/CreatePix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixServiceClient) GetPixById(ctx context.Context, in *Pix, opts ...grpc.CallOption) (*Pix, error) {
	out := new(Pix)
	err := c.cc.Invoke(ctx, "/mentoria.pix.v1.PixService/GetPixById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixServiceClient) UpdatePixBalance(ctx context.Context, in *Pix, opts ...grpc.CallOption) (*Pix, error) {
	out := new(Pix)
	err := c.cc.Invoke(ctx, "/mentoria.pix.v1.PixService/UpdatePixBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixServiceClient) CreatePixCode(ctx context.Context, in *PixCode, opts ...grpc.CallOption) (*PixCode, error) {
	out := new(PixCode)
	err := c.cc.Invoke(ctx, "/mentoria.pix.v1.PixService/CreatePixCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixServiceClient) GetPixCodeByPixId(ctx context.Context, in *PixCode, opts ...grpc.CallOption) (*PixCode, error) {
	out := new(PixCode)
	err := c.cc.Invoke(ctx, "/mentoria.pix.v1.PixService/GetPixCodeByPixId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixServiceClient) GetPixCodeByCode(ctx context.Context, in *PixCode, opts ...grpc.CallOption) (*PixCode, error) {
	out := new(PixCode)
	err := c.cc.Invoke(ctx, "/mentoria.pix.v1.PixService/GetPixCodeByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixServiceClient) UpdatePixCode(ctx context.Context, in *PixCode, opts ...grpc.CallOption) (*PixCode, error) {
	out := new(PixCode)
	err := c.cc.Invoke(ctx, "/mentoria.pix.v1.PixService/UpdatePixCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixServiceClient) DeletePixCode(ctx context.Context, in *PixCode, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/mentoria.pix.v1.PixService/DeletePixCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixServiceClient) CreateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/mentoria.pix.v1.PixService/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixServiceClient) ListUserTransactionsById(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*ListUserTransactionsByIdResponse, error) {
	out := new(ListUserTransactionsByIdResponse)
	err := c.cc.Invoke(ctx, "/mentoria.pix.v1.PixService/ListUserTransactionsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pixServiceClient) UpdateTransactionById(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/mentoria.pix.v1.PixService/UpdateTransactionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PixServiceServer is the server API for PixService service.
// All implementations must embed UnimplementedPixServiceServer
// for forward compatibility
type PixServiceServer interface {
	// RPC é remote procedure call - g é de google
	CreateBankAccount(context.Context, *BankAccount) (*BankAccount, error)
	GetBankAccountById(context.Context, *BankAccount) (*BankAccount, error)
	CreatePix(context.Context, *Pix) (*Pix, error)
	GetPixById(context.Context, *Pix) (*Pix, error)
	UpdatePixBalance(context.Context, *Pix) (*Pix, error)
	CreatePixCode(context.Context, *PixCode) (*PixCode, error)
	GetPixCodeByPixId(context.Context, *PixCode) (*PixCode, error)
	GetPixCodeByCode(context.Context, *PixCode) (*PixCode, error)
	UpdatePixCode(context.Context, *PixCode) (*PixCode, error)
	DeletePixCode(context.Context, *PixCode) (*empty.Empty, error)
	CreateTransaction(context.Context, *Transaction) (*Transaction, error)
	ListUserTransactionsById(context.Context, *Transaction) (*ListUserTransactionsByIdResponse, error)
	UpdateTransactionById(context.Context, *Transaction) (*Transaction, error)
	mustEmbedUnimplementedPixServiceServer()
}

// UnimplementedPixServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPixServiceServer struct {
}

func (UnimplementedPixServiceServer) CreateBankAccount(context.Context, *BankAccount) (*BankAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBankAccount not implemented")
}
func (UnimplementedPixServiceServer) GetBankAccountById(context.Context, *BankAccount) (*BankAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankAccountById not implemented")
}
func (UnimplementedPixServiceServer) CreatePix(context.Context, *Pix) (*Pix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePix not implemented")
}
func (UnimplementedPixServiceServer) GetPixById(context.Context, *Pix) (*Pix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPixById not implemented")
}
func (UnimplementedPixServiceServer) UpdatePixBalance(context.Context, *Pix) (*Pix, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePixBalance not implemented")
}
func (UnimplementedPixServiceServer) CreatePixCode(context.Context, *PixCode) (*PixCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePixCode not implemented")
}
func (UnimplementedPixServiceServer) GetPixCodeByPixId(context.Context, *PixCode) (*PixCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPixCodeByPixId not implemented")
}
func (UnimplementedPixServiceServer) GetPixCodeByCode(context.Context, *PixCode) (*PixCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPixCodeByCode not implemented")
}
func (UnimplementedPixServiceServer) UpdatePixCode(context.Context, *PixCode) (*PixCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePixCode not implemented")
}
func (UnimplementedPixServiceServer) DeletePixCode(context.Context, *PixCode) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePixCode not implemented")
}
func (UnimplementedPixServiceServer) CreateTransaction(context.Context, *Transaction) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedPixServiceServer) ListUserTransactionsById(context.Context, *Transaction) (*ListUserTransactionsByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserTransactionsById not implemented")
}
func (UnimplementedPixServiceServer) UpdateTransactionById(context.Context, *Transaction) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransactionById not implemented")
}
func (UnimplementedPixServiceServer) mustEmbedUnimplementedPixServiceServer() {}

// UnsafePixServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PixServiceServer will
// result in compilation errors.
type UnsafePixServiceServer interface {
	mustEmbedUnimplementedPixServiceServer()
}

func RegisterPixServiceServer(s grpc.ServiceRegistrar, srv PixServiceServer) {
	s.RegisterService(&PixService_ServiceDesc, srv)
}

func _PixService_CreateBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixServiceServer).CreateBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mentoria.pix.v1.PixService/CreateBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixServiceServer).CreateBankAccount(ctx, req.(*BankAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixService_GetBankAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixServiceServer).GetBankAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mentoria.pix.v1.PixService/GetBankAccountById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixServiceServer).GetBankAccountById(ctx, req.(*BankAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixService_CreatePix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixServiceServer).CreatePix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mentoria.pix.v1.PixService/CreatePix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixServiceServer).CreatePix(ctx, req.(*Pix))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixService_GetPixById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixServiceServer).GetPixById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mentoria.pix.v1.PixService/GetPixById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixServiceServer).GetPixById(ctx, req.(*Pix))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixService_UpdatePixBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pix)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixServiceServer).UpdatePixBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mentoria.pix.v1.PixService/UpdatePixBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixServiceServer).UpdatePixBalance(ctx, req.(*Pix))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixService_CreatePixCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PixCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixServiceServer).CreatePixCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mentoria.pix.v1.PixService/CreatePixCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixServiceServer).CreatePixCode(ctx, req.(*PixCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixService_GetPixCodeByPixId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PixCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixServiceServer).GetPixCodeByPixId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mentoria.pix.v1.PixService/GetPixCodeByPixId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixServiceServer).GetPixCodeByPixId(ctx, req.(*PixCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixService_GetPixCodeByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PixCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixServiceServer).GetPixCodeByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mentoria.pix.v1.PixService/GetPixCodeByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixServiceServer).GetPixCodeByCode(ctx, req.(*PixCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixService_UpdatePixCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PixCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixServiceServer).UpdatePixCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mentoria.pix.v1.PixService/UpdatePixCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixServiceServer).UpdatePixCode(ctx, req.(*PixCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixService_DeletePixCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PixCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixServiceServer).DeletePixCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mentoria.pix.v1.PixService/DeletePixCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixServiceServer).DeletePixCode(ctx, req.(*PixCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mentoria.pix.v1.PixService/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixServiceServer).CreateTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixService_ListUserTransactionsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixServiceServer).ListUserTransactionsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mentoria.pix.v1.PixService/ListUserTransactionsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixServiceServer).ListUserTransactionsById(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _PixService_UpdateTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PixServiceServer).UpdateTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mentoria.pix.v1.PixService/UpdateTransactionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PixServiceServer).UpdateTransactionById(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

// PixService_ServiceDesc is the grpc.ServiceDesc for PixService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PixService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mentoria.pix.v1.PixService",
	HandlerType: (*PixServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBankAccount",
			Handler:    _PixService_CreateBankAccount_Handler,
		},
		{
			MethodName: "GetBankAccountById",
			Handler:    _PixService_GetBankAccountById_Handler,
		},
		{
			MethodName: "CreatePix",
			Handler:    _PixService_CreatePix_Handler,
		},
		{
			MethodName: "GetPixById",
			Handler:    _PixService_GetPixById_Handler,
		},
		{
			MethodName: "UpdatePixBalance",
			Handler:    _PixService_UpdatePixBalance_Handler,
		},
		{
			MethodName: "CreatePixCode",
			Handler:    _PixService_CreatePixCode_Handler,
		},
		{
			MethodName: "GetPixCodeByPixId",
			Handler:    _PixService_GetPixCodeByPixId_Handler,
		},
		{
			MethodName: "GetPixCodeByCode",
			Handler:    _PixService_GetPixCodeByCode_Handler,
		},
		{
			MethodName: "UpdatePixCode",
			Handler:    _PixService_UpdatePixCode_Handler,
		},
		{
			MethodName: "DeletePixCode",
			Handler:    _PixService_DeletePixCode_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _PixService_CreateTransaction_Handler,
		},
		{
			MethodName: "ListUserTransactionsById",
			Handler:    _PixService_ListUserTransactionsById_Handler,
		},
		{
			MethodName: "UpdateTransactionById",
			Handler:    _PixService_UpdateTransactionById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/pix/v1/pix.proto",
}
